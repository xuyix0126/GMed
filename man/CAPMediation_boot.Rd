% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/CAPMediation_boot.R
\name{CAPMediation_boot}
\alias{CAPMediation_boot}
\title{Inference of model coefficients}
\usage{
CAPMediation_boot(
  X,
  M,
  Y,
  theta = NULL,
  H = NULL,
  boot = TRUE,
  sims = 1000,
  boot.ci.type = c("se", "perc"),
  conf.level = 0.95,
  seed.boot = 100,
  verbose = TRUE
)
}
\arguments{
\item{X}{A \eqn{n \times q} data matrix, the covariate matrix for \eqn{n} subjects with \eqn{q-1} predictors. The first column should be all ones.}

\item{M}{A list of length \eqn{n}. Each element of the list is a \eqn{T \times p} matrix, representing the data matrix of \eqn{T} observations from \eqn{p} features.}

\item{Y}{A \eqn{n \times 1} outcome vector, representing the outcome variable for \eqn{n} subjects.}

\item{theta}{a \eqn{p}-dimensional vector, the projecting direction \eqn{\theta}. Default is \code{NULL}. If \code{theta = NULL}, an error warning will be returned.}

\item{H}{A \eqn{p \times p} positive definite matrix used for the theta constraint. Default is \code{NULL}.}

\item{boot}{a logic variable, whether bootstrap inference is performed.}

\item{sims}{a numeric value, the number of bootstrap iterations will be performed.}

\item{boot.ci.type}{a character of the way of calculating bootstrap confidence interval. If \code{boot.ci.type = "bca"}, the bias corrected confidence interval is returned; if \code{boot.ci.type = "perc"}, the percentile confidence interval is returned.}

\item{conf.level}{a numeric value, the designated significance level. Default is \eqn{0.95}.}

\item{seed.boot}{An integer specifying the random seed for reproducibility. Default is \code{100}.}

\item{verbose}{a logic variable, whether the bootstrap procedure is printed. Default is \code{TRUE}.}
}
\description{
This function performs inference on the model coefficient \eqn{\theta}.
}
\examples{
data(env.data.example)
X <- get("X", env.data.example)
Y <- get("Y", env.data.example)
M<-get("M",env.data.example)

gamma.mat0<-matrix(runif(p),nrow=p,ncol=p)
gamma.mat<-qr.Q(qr(gamma.mat0))
for(j in 1:p)
{
if(gamma.mat[which.max(abs(gamma.mat[,j])),j]<0)
{
 gamma.mat[,j]<-(-gamma.mat[,j])
 }
 }
 Gamma<-gamma.mat
# get bootstrap result
# re.boot<-CAPMediation_boot(X,M,Y,theta=Gamma[,2],H=NULL)


}
\author{
Yixi Xu, Indiana University School of Medicine, <xuyix@iu.edu>

Yi Zhao, Indiana University School of Medicine,<zhaoyi1026@gmail.com>
}
\keyword{models}
